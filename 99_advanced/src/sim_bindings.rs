/* automatically generated by rust-bindgen 0.59.1 */

pub const _MATH_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const WB_ANGULAR: u32 = 0;
pub const WB_STDOUT: u32 = 1;
pub const WB_STDERR: u32 = 2;
pub const WB_IMAGE_RGB: u32 = 3;
pub const WB_IMAGE_RGBA: u32 = 4;
pub const WB_IMAGE_ARGB: u32 = 5;
pub const WB_IMAGE_BGRA: u32 = 6;
pub const WB_IMAGE_ABGR: u32 = 7;
pub const WB_CHANNEL_BROADCAST: i32 = -1;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const WB_SUPERVISOR_MOVIE_READY: u32 = 0;
pub const WB_SUPERVISOR_MOVIE_RECORDING: u32 = 1;
pub const WB_SUPERVISOR_MOVIE_SAVING: u32 = 2;
pub const WB_SUPERVISOR_MOVIE_WRITE_ERROR: u32 = 3;
pub const WB_SUPERVISOR_MOVIE_ENCODING_ERROR: u32 = 4;
pub const WB_SUPERVISOR_MOVIE_SIMULATION_ERROR: u32 = 5;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const ANSI_RESET: &'static [u8; 5usize] = b"\x1B[0m\0";
pub const ANSI_BOLD: &'static [u8; 5usize] = b"\x1B[1m\0";
pub const ANSI_UNDERLINE: &'static [u8; 5usize] = b"\x1B[4m\0";
pub const ANSI_BLACK_BACKGROUND: &'static [u8; 6usize] = b"\x1B[40m\0";
pub const ANSI_RED_BACKGROUND: &'static [u8; 6usize] = b"\x1B[41m\0";
pub const ANSI_GREEN_BACKGROUND: &'static [u8; 6usize] = b"\x1B[42m\0";
pub const ANSI_YELLOW_BACKGROUND: &'static [u8; 6usize] = b"\x1B[43m\0";
pub const ANSI_BLUE_BACKGROUND: &'static [u8; 6usize] = b"\x1B[44m\0";
pub const ANSI_MAGENTA_BACKGROUND: &'static [u8; 6usize] = b"\x1B[45m\0";
pub const ANSI_CYAN_BACKGROUND: &'static [u8; 6usize] = b"\x1B[46m\0";
pub const ANSI_WHITE_BACKGROUND: &'static [u8; 6usize] = b"\x1B[47m\0";
pub const ANSI_BLACK_FOREGROUND: &'static [u8; 6usize] = b"\x1B[30m\0";
pub const ANSI_RED_FOREGROUND: &'static [u8; 6usize] = b"\x1B[31m\0";
pub const ANSI_GREEN_FOREGROUND: &'static [u8; 6usize] = b"\x1B[32m\0";
pub const ANSI_YELLOW_FOREGROUND: &'static [u8; 6usize] = b"\x1B[33m\0";
pub const ANSI_BLUE_FOREGROUND: &'static [u8; 6usize] = b"\x1B[34m\0";
pub const ANSI_MAGENTA_FOREGROUND: &'static [u8; 6usize] = b"\x1B[35m\0";
pub const ANSI_CYAN_FOREGROUND: &'static [u8; 6usize] = b"\x1B[36m\0";
pub const ANSI_WHITE_FOREGROUND: &'static [u8; 6usize] = b"\x1B[37m\0";
pub const ANSI_CLEAR_SCREEN: &'static [u8; 5usize] = b"\x1B[2J\0";

pub type WbDeviceTag = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbImageStructPrivate {
    _unused: [u8; 0],
}
pub type WbImageRef = *mut WbImageStructPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbMotionStructPrivate {
    _unused: [u8; 0],
}
pub type WbMotionRef = *mut WbMotionStructPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbNodeStructPrivate {
    _unused: [u8; 0],
}
pub type WbNodeRef = *mut WbNodeStructPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbFieldStructPrivate {
    _unused: [u8; 0],
}
pub type WbFieldRef = *mut WbFieldStructPrivate;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
pub type float_t = f32;
pub type double_t = f64;

extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsig(__x: f64, __y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignaling(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigl(__x: u128, __y: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn __atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn expl(__x: u128) -> u128;
}
extern "C" {
    pub fn __expl(__x: u128) -> u128;
}
extern "C" {
    pub fn frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn logl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logl(__x: u128) -> u128;
}
extern "C" {
    pub fn log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn __expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn __log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn __ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn __fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn __floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn __significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn __scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn __roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn __truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub fn __scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
pub const FP_NAN: ::std::os::raw::c_uint = 0;
pub const FP_INFINITE: ::std::os::raw::c_uint = 1;
pub const FP_ZERO: ::std::os::raw::c_uint = 2;
pub const FP_SUBNORMAL: ::std::os::raw::c_uint = 3;
pub const FP_NORMAL: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const WbJointType_WB_ROTATIONAL: WbJointType = 0;
pub const WbJointType_WB_LINEAR: WbJointType = 1;
pub type WbJointType = ::std::os::raw::c_uint;
extern "C" {
    pub fn wb_accelerometer_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_accelerometer_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_accelerometer_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_accelerometer_get_lookup_table_size(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_accelerometer_get_lookup_table(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_accelerometer_get_values(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_altimeter_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_altimeter_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_altimeter_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_altimeter_get_value(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_brake_set_damping_constant(tag: WbDeviceTag, damping_constant: f64);
}
extern "C" {
    pub fn wb_brake_get_type(tag: WbDeviceTag) -> WbJointType;
}
extern "C" {
    pub fn wb_brake_get_motor(tag: WbDeviceTag) -> WbDeviceTag;
}
extern "C" {
    pub fn wb_brake_get_position_sensor(tag: WbDeviceTag) -> WbDeviceTag;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbCameraRecognitionObject {
    pub id: ::std::os::raw::c_int,
    pub position: [f64; 3usize],
    pub orientation: [f64; 4usize],
    pub size: [f64; 2usize],
    pub position_on_image: [::std::os::raw::c_int; 2usize],
    pub size_on_image: [::std::os::raw::c_int; 2usize],
    pub number_of_colors: ::std::os::raw::c_int,
    pub colors: *mut f64,
    pub model: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_WbCameraRecognitionObject() {
    assert_eq!(
        ::std::mem::size_of::<WbCameraRecognitionObject>(),
        120usize,
        concat!("Size of: ", stringify!(WbCameraRecognitionObject))
    );
    assert_eq!(
        ::std::mem::align_of::<WbCameraRecognitionObject>(),
        8usize,
        concat!("Alignment of ", stringify!(WbCameraRecognitionObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbCameraRecognitionObject>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbCameraRecognitionObject>())).position as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbCameraRecognitionObject>())).orientation as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(orientation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbCameraRecognitionObject>())).size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbCameraRecognitionObject>())).position_on_image as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(position_on_image)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbCameraRecognitionObject>())).size_on_image as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(size_on_image)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbCameraRecognitionObject>())).number_of_colors as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(number_of_colors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbCameraRecognitionObject>())).colors as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(colors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbCameraRecognitionObject>())).model as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(model)
        )
    );
}
extern "C" {
    pub fn wb_camera_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_camera_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_camera_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_camera_get_image(tag: WbDeviceTag) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn wb_camera_get_width(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_camera_get_height(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_camera_get_fov(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_camera_get_max_fov(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_camera_get_min_fov(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_camera_set_fov(tag: WbDeviceTag, fov: f64);
}
extern "C" {
    pub fn wb_camera_get_exposure(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_camera_set_exposure(tag: WbDeviceTag, exposure: f64);
}
extern "C" {
    pub fn wb_camera_get_focal_length(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_camera_get_focal_distance(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_camera_get_max_focal_distance(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_camera_get_min_focal_distance(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_camera_set_focal_distance(tag: WbDeviceTag, focal_distance: f64);
}
extern "C" {
    pub fn wb_camera_get_near(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_camera_save_image(
        tag: WbDeviceTag,
        filename: *const ::std::os::raw::c_char,
        quality: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_camera_has_recognition(tag: WbDeviceTag) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_camera_recognition_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_camera_recognition_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_camera_recognition_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_camera_recognition_get_number_of_objects(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_camera_recognition_get_objects(tag: WbDeviceTag) -> *const WbCameraRecognitionObject;
}
extern "C" {
    pub fn wb_camera_recognition_has_segmentation(tag: WbDeviceTag) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_camera_recognition_enable_segmentation(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_camera_recognition_disable_segmentation(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_camera_recognition_is_segmentation_enabled(
        tag: WbDeviceTag,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_camera_recognition_get_segmentation_image(
        tag: WbDeviceTag,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn wb_camera_recognition_save_segmentation_image(
        tag: WbDeviceTag,
        filename: *const ::std::os::raw::c_char,
        quality: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_compass_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_compass_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_compass_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_compass_get_lookup_table_size(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_compass_get_lookup_table(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_compass_get_values(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_connector_enable_presence(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_connector_disable_presence(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_connector_get_presence_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_connector_get_presence(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_connector_lock(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_connector_unlock(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_connector_is_locked(tag: WbDeviceTag) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_console_print(text: *const ::std::os::raw::c_char, stream: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbContactPoint {
    pub point: [f64; 3usize],
    pub node_id: ::std::os::raw::c_int,
    pub padding: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_WbContactPoint() {
    assert_eq!(
        ::std::mem::size_of::<WbContactPoint>(),
        32usize,
        concat!("Size of: ", stringify!(WbContactPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<WbContactPoint>(),
        8usize,
        concat!("Alignment of ", stringify!(WbContactPoint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbContactPoint>())).point as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WbContactPoint),
            "::",
            stringify!(point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbContactPoint>())).node_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WbContactPoint),
            "::",
            stringify!(node_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbContactPoint>())).padding as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(WbContactPoint),
            "::",
            stringify!(padding)
        )
    );
}

pub const WbNodeType_WB_NODE_NO_NODE: WbNodeType = 0;
pub const WbNodeType_WB_NODE_APPEARANCE: WbNodeType = 1;
pub const WbNodeType_WB_NODE_BACKGROUND: WbNodeType = 2;
pub const WbNodeType_WB_NODE_BILLBOARD: WbNodeType = 3;
pub const WbNodeType_WB_NODE_BOX: WbNodeType = 4;
pub const WbNodeType_WB_NODE_CAD_SHAPE: WbNodeType = 5;
pub const WbNodeType_WB_NODE_CAPSULE: WbNodeType = 6;
pub const WbNodeType_WB_NODE_COLOR: WbNodeType = 7;
pub const WbNodeType_WB_NODE_CONE: WbNodeType = 8;
pub const WbNodeType_WB_NODE_COORDINATE: WbNodeType = 9;
pub const WbNodeType_WB_NODE_CYLINDER: WbNodeType = 10;
pub const WbNodeType_WB_NODE_DIRECTIONAL_LIGHT: WbNodeType = 11;
pub const WbNodeType_WB_NODE_ELEVATION_GRID: WbNodeType = 12;
pub const WbNodeType_WB_NODE_FOG: WbNodeType = 13;
pub const WbNodeType_WB_NODE_GROUP: WbNodeType = 14;
pub const WbNodeType_WB_NODE_IMAGE_TEXTURE: WbNodeType = 15;
pub const WbNodeType_WB_NODE_INDEXED_FACE_SET: WbNodeType = 16;
pub const WbNodeType_WB_NODE_INDEXED_LINE_SET: WbNodeType = 17;
pub const WbNodeType_WB_NODE_MATERIAL: WbNodeType = 18;
pub const WbNodeType_WB_NODE_MESH: WbNodeType = 19;
pub const WbNodeType_WB_NODE_MUSCLE: WbNodeType = 20;
pub const WbNodeType_WB_NODE_NORMAL: WbNodeType = 21;
pub const WbNodeType_WB_NODE_PBR_APPEARANCE: WbNodeType = 22;
pub const WbNodeType_WB_NODE_PLANE: WbNodeType = 23;
pub const WbNodeType_WB_NODE_POINT_LIGHT: WbNodeType = 24;
pub const WbNodeType_WB_NODE_POINT_SET: WbNodeType = 25;
pub const WbNodeType_WB_NODE_POSE: WbNodeType = 26;
pub const WbNodeType_WB_NODE_SHAPE: WbNodeType = 27;
pub const WbNodeType_WB_NODE_SPHERE: WbNodeType = 28;
pub const WbNodeType_WB_NODE_SPOT_LIGHT: WbNodeType = 29;
pub const WbNodeType_WB_NODE_TEXTURE_COORDINATE: WbNodeType = 30;
pub const WbNodeType_WB_NODE_TEXTURE_TRANSFORM: WbNodeType = 31;
pub const WbNodeType_WB_NODE_TRANSFORM: WbNodeType = 32;
pub const WbNodeType_WB_NODE_VIEWPOINT: WbNodeType = 33;
pub const WbNodeType_WB_NODE_ROBOT: WbNodeType = 34;
pub const WbNodeType_WB_NODE_ACCELEROMETER: WbNodeType = 35;
pub const WbNodeType_WB_NODE_ALTIMETER: WbNodeType = 36;
pub const WbNodeType_WB_NODE_BRAKE: WbNodeType = 37;
pub const WbNodeType_WB_NODE_CAMERA: WbNodeType = 38;
pub const WbNodeType_WB_NODE_COMPASS: WbNodeType = 39;
pub const WbNodeType_WB_NODE_CONNECTOR: WbNodeType = 40;
pub const WbNodeType_WB_NODE_DISPLAY: WbNodeType = 41;
pub const WbNodeType_WB_NODE_DISTANCE_SENSOR: WbNodeType = 42;
pub const WbNodeType_WB_NODE_EMITTER: WbNodeType = 43;
pub const WbNodeType_WB_NODE_GPS: WbNodeType = 44;
pub const WbNodeType_WB_NODE_GYRO: WbNodeType = 45;
pub const WbNodeType_WB_NODE_INERTIAL_UNIT: WbNodeType = 46;
pub const WbNodeType_WB_NODE_LED: WbNodeType = 47;
pub const WbNodeType_WB_NODE_LIDAR: WbNodeType = 48;
pub const WbNodeType_WB_NODE_LIGHT_SENSOR: WbNodeType = 49;
pub const WbNodeType_WB_NODE_LINEAR_MOTOR: WbNodeType = 50;
pub const WbNodeType_WB_NODE_PEN: WbNodeType = 51;
pub const WbNodeType_WB_NODE_POSITION_SENSOR: WbNodeType = 52;
pub const WbNodeType_WB_NODE_PROPELLER: WbNodeType = 53;
pub const WbNodeType_WB_NODE_RADAR: WbNodeType = 54;
pub const WbNodeType_WB_NODE_RANGE_FINDER: WbNodeType = 55;
pub const WbNodeType_WB_NODE_RECEIVER: WbNodeType = 56;
pub const WbNodeType_WB_NODE_ROTATIONAL_MOTOR: WbNodeType = 57;
pub const WbNodeType_WB_NODE_SKIN: WbNodeType = 58;
pub const WbNodeType_WB_NODE_SPEAKER: WbNodeType = 59;
pub const WbNodeType_WB_NODE_TOUCH_SENSOR: WbNodeType = 60;
pub const WbNodeType_WB_NODE_VACUUM_GRIPPER: WbNodeType = 61;
pub const WbNodeType_WB_NODE_BALL_JOINT: WbNodeType = 62;
pub const WbNodeType_WB_NODE_BALL_JOINT_PARAMETERS: WbNodeType = 63;
pub const WbNodeType_WB_NODE_CHARGER: WbNodeType = 64;
pub const WbNodeType_WB_NODE_CONTACT_PROPERTIES: WbNodeType = 65;
pub const WbNodeType_WB_NODE_DAMPING: WbNodeType = 66;
pub const WbNodeType_WB_NODE_FLUID: WbNodeType = 67;
pub const WbNodeType_WB_NODE_FOCUS: WbNodeType = 68;
pub const WbNodeType_WB_NODE_HINGE_JOINT: WbNodeType = 69;
pub const WbNodeType_WB_NODE_HINGE_JOINT_PARAMETERS: WbNodeType = 70;
pub const WbNodeType_WB_NODE_HINGE_2_JOINT: WbNodeType = 71;
pub const WbNodeType_WB_NODE_IMMERSION_PROPERTIES: WbNodeType = 72;
pub const WbNodeType_WB_NODE_JOINT_PARAMETERS: WbNodeType = 73;
pub const WbNodeType_WB_NODE_LENS: WbNodeType = 74;
pub const WbNodeType_WB_NODE_LENS_FLARE: WbNodeType = 75;
pub const WbNodeType_WB_NODE_PHYSICS: WbNodeType = 76;
pub const WbNodeType_WB_NODE_RECOGNITION: WbNodeType = 77;
pub const WbNodeType_WB_NODE_SLIDER_JOINT: WbNodeType = 78;
pub const WbNodeType_WB_NODE_SLOT: WbNodeType = 79;
pub const WbNodeType_WB_NODE_SOLID: WbNodeType = 80;
pub const WbNodeType_WB_NODE_SOLID_REFERENCE: WbNodeType = 81;
pub const WbNodeType_WB_NODE_TRACK: WbNodeType = 82;
pub const WbNodeType_WB_NODE_TRACK_WHEEL: WbNodeType = 83;
pub const WbNodeType_WB_NODE_WORLD_INFO: WbNodeType = 84;
pub const WbNodeType_WB_NODE_ZOOM: WbNodeType = 85;
pub const WbNodeType_WB_NODE_MICROPHONE: WbNodeType = 86;
pub const WbNodeType_WB_NODE_RADIO: WbNodeType = 87;
pub type WbNodeType = ::std::os::raw::c_uint;
extern "C" {
    pub fn wb_node_get_name(t: WbNodeType) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_device_get_name(dt: WbDeviceTag) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_device_get_model(dt: WbDeviceTag) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_device_get_node_type(dt: WbDeviceTag) -> WbNodeType;
}
extern "C" {
    pub fn wb_device_get_type(dt: WbDeviceTag) -> WbNodeType;
}
extern "C" {
    pub fn wb_display_get_width(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_display_get_height(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_display_set_color(tag: WbDeviceTag, color: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_display_set_alpha(tag: WbDeviceTag, alpha: f64);
}
extern "C" {
    pub fn wb_display_set_opacity(tag: WbDeviceTag, opacity: f64);
}
extern "C" {
    pub fn wb_display_set_font(
        tag: WbDeviceTag,
        font: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        anti_aliasing: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_display_attach_camera(tag: WbDeviceTag, camera_tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_display_detach_camera(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_display_draw_pixel(
        tag: WbDeviceTag,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_display_draw_line(
        tag: WbDeviceTag,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_display_draw_rectangle(
        tag: WbDeviceTag,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_display_draw_oval(
        tag: WbDeviceTag,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        a: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_display_draw_polygon(
        tag: WbDeviceTag,
        x: *const ::std::os::raw::c_int,
        y: *const ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_display_draw_text(
        tag: WbDeviceTag,
        text: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_display_fill_rectangle(
        tag: WbDeviceTag,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_display_fill_oval(
        tag: WbDeviceTag,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        a: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_display_fill_polygon(
        tag: WbDeviceTag,
        x: *const ::std::os::raw::c_int,
        y: *const ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_display_image_new(
        tag: WbDeviceTag,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_void,
        format: ::std::os::raw::c_int,
    ) -> WbImageRef;
}
extern "C" {
    pub fn wb_display_image_copy(
        tag: WbDeviceTag,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> WbImageRef;
}
extern "C" {
    pub fn wb_display_image_load(
        tag: WbDeviceTag,
        filename: *const ::std::os::raw::c_char,
    ) -> WbImageRef;
}
extern "C" {
    pub fn wb_display_image_delete(tag: WbDeviceTag, ir: WbImageRef);
}
extern "C" {
    pub fn wb_display_image_paste(
        tag: WbDeviceTag,
        ir: WbImageRef,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        blend: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_display_image_save(
        tag: WbDeviceTag,
        ir: WbImageRef,
        filename: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_distance_sensor_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_distance_sensor_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_distance_sensor_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_distance_sensor_get_value(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_distance_sensor_get_max_value(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_distance_sensor_get_min_value(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_distance_sensor_get_aperture(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_distance_sensor_get_lookup_table_size(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_distance_sensor_get_lookup_table(tag: WbDeviceTag) -> *const f64;
}
pub const WbDistanceSensorType_WB_DISTANCE_SENSOR_GENERIC: WbDistanceSensorType = 0;
pub const WbDistanceSensorType_WB_DISTANCE_SENSOR_INFRA_RED: WbDistanceSensorType = 1;
pub const WbDistanceSensorType_WB_DISTANCE_SENSOR_SONAR: WbDistanceSensorType = 2;
pub const WbDistanceSensorType_WB_DISTANCE_SENSOR_LASER: WbDistanceSensorType = 3;
pub type WbDistanceSensorType = ::std::os::raw::c_uint;
extern "C" {
    pub fn wb_distance_sensor_get_type(tag: WbDeviceTag) -> WbDistanceSensorType;
}
extern "C" {
    pub fn wb_emitter_send(
        tag: WbDeviceTag,
        data: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_emitter_get_buffer_size(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_emitter_set_channel(tag: WbDeviceTag, channel: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_emitter_get_channel(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_emitter_get_range(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_emitter_set_range(tag: WbDeviceTag, range: f64);
}
extern "C" {
    pub fn wb_gps_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_gps_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_gps_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_gps_get_speed(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_gps_get_speed_vector(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_gps_get_values(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_gps_convert_to_degrees_minutes_seconds(
        decimal_degrees: f64,
    ) -> *const ::std::os::raw::c_char;
}
pub const WbGpsCoordinateSystem_WB_GPS_LOCAL_COORDINATE: WbGpsCoordinateSystem = 0;
pub const WbGpsCoordinateSystem_WB_GPS_WGS84_COORDINATE: WbGpsCoordinateSystem = 1;
pub type WbGpsCoordinateSystem = ::std::os::raw::c_uint;
extern "C" {
    pub fn wb_gps_get_coordinate_system(tag: WbDeviceTag) -> WbGpsCoordinateSystem;
}
extern "C" {
    pub fn wb_gyro_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_gyro_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_gyro_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_gyro_get_lookup_table_size(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_gyro_get_lookup_table(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_gyro_get_values(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_inertial_unit_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_inertial_unit_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_inertial_unit_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_inertial_unit_get_noise(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_inertial_unit_get_roll_pitch_yaw(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_inertial_unit_get_quaternion(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_joystick_enable(sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_joystick_disable();
}
extern "C" {
    pub fn wb_joystick_get_sampling_period() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_joystick_is_connected() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_joystick_get_model() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_joystick_get_number_of_axes() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_joystick_get_axis_value(axis: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_joystick_get_number_of_povs() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_joystick_get_pov_value(pov: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_joystick_get_pressed_button() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_joystick_set_constant_force(level: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_joystick_set_constant_force_duration(duration: f64);
}
extern "C" {
    pub fn wb_joystick_set_auto_centering_gain(gain: f64);
}
extern "C" {
    pub fn wb_joystick_set_resistance_gain(gain: f64);
}
extern "C" {
    pub fn wb_joystick_set_force_axis(axis: ::std::os::raw::c_int);
}
pub const WB_KEYBOARD_END: ::std::os::raw::c_uint = 312;
pub const WB_KEYBOARD_HOME: ::std::os::raw::c_uint = 313;
pub const WB_KEYBOARD_LEFT: ::std::os::raw::c_uint = 314;
pub const WB_KEYBOARD_UP: ::std::os::raw::c_uint = 315;
pub const WB_KEYBOARD_RIGHT: ::std::os::raw::c_uint = 316;
pub const WB_KEYBOARD_DOWN: ::std::os::raw::c_uint = 317;
pub const WB_KEYBOARD_PAGEUP: ::std::os::raw::c_uint = 366;
pub const WB_KEYBOARD_PAGEDOWN: ::std::os::raw::c_uint = 367;
pub const WB_KEYBOARD_NUMPAD_HOME: ::std::os::raw::c_uint = 375;
pub const WB_KEYBOARD_NUMPAD_LEFT: ::std::os::raw::c_uint = 376;
pub const WB_KEYBOARD_NUMPAD_UP: ::std::os::raw::c_uint = 377;
pub const WB_KEYBOARD_NUMPAD_RIGHT: ::std::os::raw::c_uint = 378;
pub const WB_KEYBOARD_NUMPAD_DOWN: ::std::os::raw::c_uint = 379;
pub const WB_KEYBOARD_NUMPAD_END: ::std::os::raw::c_uint = 382;
pub const WB_KEYBOARD_KEY: ::std::os::raw::c_uint = 65535;
pub const WB_KEYBOARD_SHIFT: ::std::os::raw::c_uint = 65536;
pub const WB_KEYBOARD_CONTROL: ::std::os::raw::c_uint = 131072;
pub const WB_KEYBOARD_ALT: ::std::os::raw::c_uint = 262144;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
extern "C" {
    pub fn wb_keyboard_enable(sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_keyboard_disable();
}
extern "C" {
    pub fn wb_keyboard_get_sampling_period() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_keyboard_get_key() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_led_set(tag: WbDeviceTag, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_led_get(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbLidarPoint {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub layer_id: ::std::os::raw::c_int,
    pub time: f32,
}
#[test]
fn bindgen_test_layout_WbLidarPoint() {
    assert_eq!(
        ::std::mem::size_of::<WbLidarPoint>(),
        20usize,
        concat!("Size of: ", stringify!(WbLidarPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<WbLidarPoint>(),
        4usize,
        concat!("Alignment of ", stringify!(WbLidarPoint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbLidarPoint>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WbLidarPoint),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbLidarPoint>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WbLidarPoint),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbLidarPoint>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WbLidarPoint),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbLidarPoint>())).layer_id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WbLidarPoint),
            "::",
            stringify!(layer_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbLidarPoint>())).time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WbLidarPoint),
            "::",
            stringify!(time)
        )
    );
}
extern "C" {
    pub fn wb_lidar_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_lidar_enable_point_cloud(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_lidar_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_lidar_disable_point_cloud(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_lidar_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_lidar_is_point_cloud_enabled(tag: WbDeviceTag) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_lidar_get_range_image(tag: WbDeviceTag) -> *const f32;
}
extern "C" {
    pub fn wb_lidar_get_layer_range_image(
        tag: WbDeviceTag,
        layer: ::std::os::raw::c_int,
    ) -> *const f32;
}
extern "C" {
    pub fn wb_lidar_get_point_cloud(tag: WbDeviceTag) -> *const WbLidarPoint;
}
extern "C" {
    pub fn wb_lidar_get_layer_point_cloud(
        tag: WbDeviceTag,
        layer: ::std::os::raw::c_int,
    ) -> *const WbLidarPoint;
}
extern "C" {
    pub fn wb_lidar_get_number_of_points(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_lidar_get_horizontal_resolution(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_lidar_get_number_of_layers(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_lidar_get_min_frequency(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_lidar_get_max_frequency(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_lidar_get_frequency(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_lidar_set_frequency(tag: WbDeviceTag, frequency: f64);
}
extern "C" {
    pub fn wb_lidar_get_fov(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_lidar_get_vertical_fov(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_lidar_get_min_range(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_lidar_get_max_range(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_light_sensor_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_light_sensor_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_light_sensor_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_light_sensor_get_lookup_table_size(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_light_sensor_get_lookup_table(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_light_sensor_get_value(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_microphone_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_microphone_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_microphone_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_microphone_get_sample_data(tag: WbDeviceTag) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn wb_microphone_get_sample_size(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_motor_set_position(tag: WbDeviceTag, position: f64);
}
extern "C" {
    pub fn wb_motor_set_acceleration(tag: WbDeviceTag, acceleration: f64);
}
extern "C" {
    pub fn wb_motor_set_velocity(tag: WbDeviceTag, velocity: f64);
}
extern "C" {
    pub fn wb_motor_set_force(tag: WbDeviceTag, force: f64);
}
extern "C" {
    pub fn wb_motor_set_torque(tag: WbDeviceTag, torque: f64);
}
extern "C" {
    pub fn wb_motor_set_available_force(tag: WbDeviceTag, force: f64);
}
extern "C" {
    pub fn wb_motor_set_available_torque(tag: WbDeviceTag, torque: f64);
}
extern "C" {
    pub fn wb_motor_set_control_pid(tag: WbDeviceTag, p: f64, i: f64, d: f64);
}
extern "C" {
    pub fn wb_motor_enable_force_feedback(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_motor_disable_force_feedback(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_motor_get_force_feedback_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_motor_get_force_feedback(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_enable_torque_feedback(
        tag: WbDeviceTag,
        sampling_period: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_motor_disable_torque_feedback(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_motor_get_torque_feedback_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_motor_get_torque_feedback(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_type(tag: WbDeviceTag) -> WbJointType;
}
extern "C" {
    pub fn wb_motor_get_target_position(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_min_position(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_max_position(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_velocity(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_max_velocity(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_acceleration(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_available_force(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_max_force(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_available_torque(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_max_torque(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_multiplier(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_brake(tag: WbDeviceTag) -> WbDeviceTag;
}
extern "C" {
    pub fn wb_motor_get_position_sensor(tag: WbDeviceTag) -> WbDeviceTag;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbMouseState {
    pub u: f64,
    pub v: f64,
    pub x: f64,
    pub y: f64,
    pub z: f64,
    pub left: ::std::os::raw::c_char,
    pub middle: ::std::os::raw::c_char,
    pub right: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_WbMouseState() {
    assert_eq!(
        ::std::mem::size_of::<WbMouseState>(),
        48usize,
        concat!("Size of: ", stringify!(WbMouseState))
    );
    assert_eq!(
        ::std::mem::align_of::<WbMouseState>(),
        8usize,
        concat!("Alignment of ", stringify!(WbMouseState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbMouseState>())).u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbMouseState>())).v as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbMouseState>())).x as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbMouseState>())).y as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbMouseState>())).z as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbMouseState>())).left as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbMouseState>())).middle as *const _ as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(middle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbMouseState>())).right as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(right)
        )
    );
}
extern "C" {
    pub fn wb_mouse_enable(sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_mouse_disable();
}
extern "C" {
    pub fn wb_mouse_get_sampling_period() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_mouse_enable_3d_position();
}
extern "C" {
    pub fn wb_mouse_disable_3d_position();
}
extern "C" {
    pub fn wb_mouse_is_3d_position_enabled() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_mouse_get_state() -> WbMouseState;
}
extern "C" {
    pub fn wb_pen_write(tag: WbDeviceTag, write: ::std::os::raw::c_char);
}
extern "C" {
    pub fn wb_pen_set_ink_color(tag: WbDeviceTag, color: ::std::os::raw::c_int, density: f64);
}
pub type size_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
        __l: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: size_t) -> size_t;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: size_t,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: size_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_wwi_send(data: *const ::std::os::raw::c_char, size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_robot_wwi_receive(size: *mut ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_wwi_receive_text() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_default_robot_window_configure();
}
extern "C" {
    pub fn wbu_default_robot_window_update();
}
extern "C" {
    pub fn wbu_default_robot_window_set_images_max_size(
        max_width: ::std::os::raw::c_int,
        max_height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wbu_generic_robot_window_parse_device_command(
        token: *mut ::std::os::raw::c_char,
        tokens: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wbu_generic_robot_window_parse_device_control_command(
        first_token: *mut ::std::os::raw::c_char,
        tokens: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_generic_robot_window_handle_messages(
        message: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_generic_robot_window_init();
}
extern "C" {
    pub fn wbu_generic_robot_window_update();
}
extern "C" {
    pub fn wbu_generic_robot_window_is_hidden() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_generic_robot_window_refresh_rate() -> f64;
}
extern "C" {
    pub fn wbu_generic_robot_window_needs_update() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_window_custom_function(
        arg1: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wb_position_sensor_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_position_sensor_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_position_sensor_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_position_sensor_get_value(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_position_sensor_get_type(tag: WbDeviceTag) -> WbJointType;
}
extern "C" {
    pub fn wb_position_sensor_get_motor(tag: WbDeviceTag) -> WbDeviceTag;
}
extern "C" {
    pub fn wb_position_sensor_get_brake(tag: WbDeviceTag) -> WbDeviceTag;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbRadarTarget {
    pub distance: f64,
    pub received_power: f64,
    pub speed: f64,
    pub azimuth: f64,
}
#[test]
fn bindgen_test_layout_WbRadarTarget() {
    assert_eq!(
        ::std::mem::size_of::<WbRadarTarget>(),
        32usize,
        concat!("Size of: ", stringify!(WbRadarTarget))
    );
    assert_eq!(
        ::std::mem::align_of::<WbRadarTarget>(),
        8usize,
        concat!("Alignment of ", stringify!(WbRadarTarget))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbRadarTarget>())).distance as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WbRadarTarget),
            "::",
            stringify!(distance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbRadarTarget>())).received_power as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WbRadarTarget),
            "::",
            stringify!(received_power)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbRadarTarget>())).speed as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WbRadarTarget),
            "::",
            stringify!(speed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbRadarTarget>())).azimuth as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WbRadarTarget),
            "::",
            stringify!(azimuth)
        )
    );
}
extern "C" {
    pub fn wb_radar_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_radar_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_radar_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_radar_get_number_of_targets(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_radar_get_targets(tag: WbDeviceTag) -> *const WbRadarTarget;
}
extern "C" {
    pub fn wb_radar_get_min_range(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_radar_get_max_range(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_radar_get_horizontal_fov(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_radar_get_vertical_fov(tag: WbDeviceTag) -> f64;
}
pub type WbRadioMessage = *mut ::std::os::raw::c_void;
pub type WbRadioEvent = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn wb_radio_message_new(
        length: ::std::os::raw::c_int,
        body: *const ::std::os::raw::c_char,
        destination: *const ::std::os::raw::c_char,
    ) -> WbRadioMessage;
}
extern "C" {
    pub fn wb_radio_message_delete(arg1: WbRadioMessage);
}
extern "C" {
    pub fn wb_radio_message_get_destination(arg1: WbRadioMessage) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_radio_message_get_length(arg1: WbRadioMessage) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_radio_message_get_body(arg1: WbRadioMessage) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_radio_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_radio_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_radio_set_address(tag: WbDeviceTag, address: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn wb_radio_get_address(tag: WbDeviceTag) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_radio_set_frequency(tag: WbDeviceTag, hz: f64);
}
extern "C" {
    pub fn wb_radio_get_frequency(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_radio_set_channel(tag: WbDeviceTag, channel: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_radio_get_channel(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_radio_set_bitrate(tag: WbDeviceTag, bits_per_second: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_radio_get_bitrate(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_radio_set_rx_sensitivity(tag: WbDeviceTag, dBm: f64);
}
extern "C" {
    pub fn wb_radio_get_rx_sensitivity(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_radio_set_tx_power(tag: WbDeviceTag, dBm: f64);
}
extern "C" {
    pub fn wb_radio_get_tx_power(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_radio_set_callback(
        tag: WbDeviceTag,
        arg1: ::std::option::Option<unsafe extern "C" fn(arg1: WbRadioEvent)>,
    );
}
extern "C" {
    pub fn wb_radio_event_get_radio(arg1: WbRadioEvent) -> WbDeviceTag;
}
extern "C" {
    pub fn wb_radio_event_get_data(arg1: WbRadioEvent) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_radio_event_get_data_size(arg1: WbRadioEvent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_radio_event_get_emitter(arg1: WbRadioEvent) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_radio_event_get_rssi(arg1: WbRadioEvent) -> f64;
}
extern "C" {
    pub fn wb_radio_send(tag: WbDeviceTag, arg1: WbRadioMessage, delay: f64);
}
extern "C" {
    pub fn wb_range_finder_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_range_finder_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_range_finder_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_range_finder_get_range_image(tag: WbDeviceTag) -> *const f32;
}
extern "C" {
    pub fn wb_range_finder_get_width(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_range_finder_get_height(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_range_finder_get_fov(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_range_finder_get_min_range(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_range_finder_get_max_range(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_range_finder_save_image(
        tag: WbDeviceTag,
        filename: *const ::std::os::raw::c_char,
        quality: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_receiver_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_receiver_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_receiver_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_receiver_set_channel(tag: WbDeviceTag, channel: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_receiver_get_channel(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_receiver_get_queue_length(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_receiver_next_packet(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_receiver_get_data_size(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_receiver_get_data(tag: WbDeviceTag) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn wb_receiver_get_signal_strength(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_receiver_get_emitter_direction(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_remote_control_custom_function(
        arg1: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wbr_robot_battery_sensor_set_value(value: f64);
}
extern "C" {
    pub fn wbr_accelerometer_set_values(tag: WbDeviceTag, values: *const f64);
}
extern "C" {
    pub fn wbr_camera_recognition_set_object(
        tag: WbDeviceTag,
        objects: *const WbCameraRecognitionObject,
        object_number: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wbr_compass_set_values(tag: WbDeviceTag, values: *const f64);
}
extern "C" {
    pub fn wbr_distance_sensor_set_value(tag: WbDeviceTag, value: f64);
}
extern "C" {
    pub fn wbr_gps_set_values(tag: WbDeviceTag, values: *const f64);
}
extern "C" {
    pub fn wbr_gps_set_speed(tag: WbDeviceTag, speed: f64);
}
extern "C" {
    pub fn wbr_gps_set_velocity_vector(tag: WbDeviceTag, values: *const f64);
}
extern "C" {
    pub fn wbr_gyro_set_values(tag: WbDeviceTag, values: *const f64);
}
extern "C" {
    pub fn wbr_inertial_unit_set_value(tag: WbDeviceTag, value: f64);
}
extern "C" {
    pub fn wbr_light_sensor_set_value(tag: WbDeviceTag, value: f64);
}
extern "C" {
    pub fn wbr_microphone_set_buffer(
        tag: WbDeviceTag,
        buffer: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wbr_motor_set_position_feedback(tag: WbDeviceTag, value: f64);
}
extern "C" {
    pub fn wbr_motor_set_force_feedback(tag: WbDeviceTag, value: f64);
}
extern "C" {
    pub fn wbr_motor_set_torque_feedback(tag: WbDeviceTag, value: f64);
}
extern "C" {
    pub fn wbr_position_sensor_set_value(tag: WbDeviceTag, value: f64);
}
extern "C" {
    pub fn wbr_radar_set_targets(
        tag: WbDeviceTag,
        targets: *const WbRadarTarget,
        target_number: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wbr_touch_sensor_set_value(tag: WbDeviceTag, value: f64);
}
extern "C" {
    pub fn wbr_touch_sensor_set_values(tag: WbDeviceTag, values: *const f64);
}
extern "C" {
    pub fn wbr_display_save_image(
        tag: WbDeviceTag,
        id: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        image: *mut ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn wbr_camera_set_image(tag: WbDeviceTag, image: *const ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn wbr_camera_get_image_buffer(tag: WbDeviceTag) -> *mut ::std::os::raw::c_uchar;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbrInterface {
    pub mandatory: WbrInterface__bindgen_ty_1,
    pub wbr_custom_function: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub wbr_robot_battery_set_sampling_period:
        ::std::option::Option<unsafe extern "C" fn(sampling_period: ::std::os::raw::c_int)>,
    pub wbr_set_sampling_period: ::std::option::Option<
        unsafe extern "C" fn(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int),
    >,
    pub wbr_camera_set_fov: ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, fov: f64)>,
    pub wbr_camera_set_exposure:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, exposure: f64)>,
    pub wbr_camera_set_focal_distance:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, focal_distance: f64)>,
    pub wbr_led_set:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, state: ::std::os::raw::c_int)>,
    pub wbr_pen_set_ink_color: ::std::option::Option<
        unsafe extern "C" fn(tag: WbDeviceTag, color: ::std::os::raw::c_int, density: f64),
    >,
    pub wbr_pen_write: ::std::option::Option<
        unsafe extern "C" fn(tag: WbDeviceTag, write: ::std::os::raw::c_char),
    >,
    pub wbr_speaker_emit_sample: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            data: *const ::std::os::raw::c_void,
            size: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_motor_set_force_sampling_period: ::std::option::Option<
        unsafe extern "C" fn(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int),
    >,
    pub wbr_motor_set_torque_sampling_period: ::std::option::Option<
        unsafe extern "C" fn(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int),
    >,
    pub wbr_motor_set_position:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, position: f64)>,
    pub wbr_motor_set_acceleration:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, acceleration: f64)>,
    pub wbr_motor_set_velocity:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, velocity: f64)>,
    pub wbr_motor_set_force:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, force: f64)>,
    pub wbr_motor_set_torque:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, torque: f64)>,
    pub wbr_motor_set_available_force:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, available_force: f64)>,
    pub wbr_motor_set_available_torque:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, available_torque: f64)>,
    pub wbr_motor_set_control_pid:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, p: f64, i: f64, d: f64)>,
    pub wbr_display_set_color:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, color: ::std::os::raw::c_int)>,
    pub wbr_display_set_alpha:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, alpha: f64)>,
    pub wbr_display_set_opacity:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, opacity: f64)>,
    pub wbr_display_draw_pixel: ::std::option::Option<
        unsafe extern "C" fn(tag: WbDeviceTag, x: ::std::os::raw::c_int, y: ::std::os::raw::c_int),
    >,
    pub wbr_display_draw_line: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            x1: ::std::os::raw::c_int,
            y1: ::std::os::raw::c_int,
            x2: ::std::os::raw::c_int,
            y2: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_draw_rectangle: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_draw_oval: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            cx: ::std::os::raw::c_int,
            cy: ::std::os::raw::c_int,
            a: ::std::os::raw::c_int,
            b: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_draw_polygon: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            x: *const ::std::os::raw::c_int,
            y: *const ::std::os::raw::c_int,
            size: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_draw_text: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            txt: *const ::std::os::raw::c_char,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_fill_rectangle: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_fill_oval: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            cx: ::std::os::raw::c_int,
            cy: ::std::os::raw::c_int,
            a: ::std::os::raw::c_int,
            b: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_fill_polygon: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            x: *const ::std::os::raw::c_int,
            y: *const ::std::os::raw::c_int,
            size: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_image_new: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            id: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            data: *const ::std::os::raw::c_void,
            format: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_image_copy: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            id: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_image_delete:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, id: ::std::os::raw::c_int)>,
    pub wbr_display_image_paste: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            id: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_image_save:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, id: ::std::os::raw::c_int)>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbrInterface__bindgen_ty_1 {
    pub wbr_start: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_char,
    >,
    pub wbr_stop: ::std::option::Option<unsafe extern "C" fn()>,
    pub wbr_has_failed: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_char>,
    pub wbr_stop_actuators: ::std::option::Option<unsafe extern "C" fn()>,
    pub wbr_robot_step: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_WbrInterface__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<WbrInterface__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(WbrInterface__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<WbrInterface__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(WbrInterface__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface__bindgen_ty_1>())).wbr_start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface__bindgen_ty_1),
            "::",
            stringify!(wbr_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface__bindgen_ty_1>())).wbr_stop as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface__bindgen_ty_1),
            "::",
            stringify!(wbr_stop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface__bindgen_ty_1>())).wbr_has_failed as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface__bindgen_ty_1),
            "::",
            stringify!(wbr_has_failed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface__bindgen_ty_1>())).wbr_stop_actuators as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface__bindgen_ty_1),
            "::",
            stringify!(wbr_stop_actuators)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface__bindgen_ty_1>())).wbr_robot_step as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface__bindgen_ty_1),
            "::",
            stringify!(wbr_robot_step)
        )
    );
}
#[test]
fn bindgen_test_layout_WbrInterface() {
    assert_eq!(
        ::std::mem::size_of::<WbrInterface>(),
        336usize,
        concat!("Size of: ", stringify!(WbrInterface))
    );
    assert_eq!(
        ::std::mem::align_of::<WbrInterface>(),
        8usize,
        concat!("Alignment of ", stringify!(WbrInterface))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbrInterface>())).mandatory as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(mandatory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_custom_function as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_custom_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_robot_battery_set_sampling_period
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_robot_battery_set_sampling_period)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_set_sampling_period as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_set_sampling_period)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbrInterface>())).wbr_camera_set_fov as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_camera_set_fov)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_camera_set_exposure as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_camera_set_exposure)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_camera_set_focal_distance as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_camera_set_focal_distance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbrInterface>())).wbr_led_set as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_led_set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_pen_set_ink_color as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_pen_set_ink_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbrInterface>())).wbr_pen_write as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_pen_write)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_speaker_emit_sample as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_speaker_emit_sample)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_motor_set_force_sampling_period as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_force_sampling_period)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_motor_set_torque_sampling_period
                as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_torque_sampling_period)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_motor_set_position as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_motor_set_acceleration as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_acceleration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_motor_set_velocity as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_velocity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_motor_set_force as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_force)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_motor_set_torque as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_torque)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_motor_set_available_force as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_available_force)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_motor_set_available_torque as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_available_torque)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_motor_set_control_pid as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_control_pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_set_color as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_set_color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_set_alpha as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_set_alpha)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_set_opacity as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_set_opacity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_draw_pixel as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_draw_pixel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_draw_line as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_draw_line)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_draw_rectangle as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_draw_rectangle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_draw_oval as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_draw_oval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_draw_polygon as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_draw_polygon)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_draw_text as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_draw_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_fill_rectangle as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_fill_rectangle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_fill_oval as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_fill_oval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_fill_polygon as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_fill_polygon)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_image_new as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_image_new)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_image_copy as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_image_copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_image_delete as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_image_delete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_image_paste as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_image_paste)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_image_save as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_image_save)
        )
    );
}
pub type WbMutexRef = *mut ::std::os::raw::c_void;
pub const WbRobotMode_WB_MODE_SIMULATION: WbRobotMode = 0;
pub const WbRobotMode_WB_MODE_CROSS_COMPILATION: WbRobotMode = 1;
pub const WbRobotMode_WB_MODE_REMOTE_CONTROL: WbRobotMode = 2;
pub type WbRobotMode = ::std::os::raw::c_uint;
pub const WbUserInputEvent_WB_EVENT_QUIT: WbUserInputEvent = -1;
pub const WbUserInputEvent_WB_EVENT_NO_EVENT: WbUserInputEvent = 0;
pub const WbUserInputEvent_WB_EVENT_MOUSE_CLICK: WbUserInputEvent = 1;
pub const WbUserInputEvent_WB_EVENT_MOUSE_MOVE: WbUserInputEvent = 2;
pub const WbUserInputEvent_WB_EVENT_KEYBOARD: WbUserInputEvent = 4;
pub const WbUserInputEvent_WB_EVENT_JOYSTICK_BUTTON: WbUserInputEvent = 8;
pub const WbUserInputEvent_WB_EVENT_JOYSTICK_AXIS: WbUserInputEvent = 16;
pub const WbUserInputEvent_WB_EVENT_JOYSTICK_POV: WbUserInputEvent = 32;
pub type WbUserInputEvent = ::std::os::raw::c_int;
extern "C" {
    pub fn wb_robot_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_robot_step_begin(duration: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_robot_step_end() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_robot_step(duration: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_robot_wait_for_user_input_event(
        event_type: WbUserInputEvent,
        timeout: ::std::os::raw::c_int,
    ) -> WbUserInputEvent;
}
extern "C" {
    pub fn wb_robot_cleanup();
}
extern "C" {
    pub fn wb_robot_get_time() -> f64;
}
extern "C" {
    pub fn wb_robot_get_urdf(
        prefix: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_get_name() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_get_model() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_get_custom_data() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_set_custom_data(data: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn wb_robot_get_mode() -> WbRobotMode;
}
extern "C" {
    pub fn wb_robot_set_mode(mode: WbRobotMode, arg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn wb_robot_get_synchronization() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_get_supervisor() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_get_project_path() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_get_world_path() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_get_basic_time_step() -> f64;
}
extern "C" {
    pub fn wb_robot_get_device(name: *const ::std::os::raw::c_char) -> WbDeviceTag;
}
extern "C" {
    pub fn wb_robot_get_number_of_devices() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_robot_get_device_by_index(index: ::std::os::raw::c_int) -> WbDeviceTag;
}
extern "C" {
    pub fn wb_robot_battery_sensor_enable(sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_robot_battery_sensor_disable();
}
extern "C" {
    pub fn wb_robot_battery_sensor_get_sampling_period() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_robot_battery_sensor_get_value() -> f64;
}
extern "C" {
    pub fn wb_robot_task_new(
        task: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        param: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wb_robot_mutex_new() -> WbMutexRef;
}
extern "C" {
    pub fn wb_robot_mutex_lock(arg1: WbMutexRef);
}
extern "C" {
    pub fn wb_robot_mutex_unlock(arg1: WbMutexRef);
}
extern "C" {
    pub fn wb_robot_mutex_delete(arg1: WbMutexRef);
}
extern "C" {
    pub fn wb_robot_pin_to_static_environment(pin: ::std::os::raw::c_char);
}
extern "C" {
    pub fn wb_robot_get_controller_name() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_get_data() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_set_data(data: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn wb_skin_set_bone_orientation(
        tag: WbDeviceTag,
        index: ::std::os::raw::c_int,
        orientation: *const f64,
        absolute: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_skin_set_bone_position(
        tag: WbDeviceTag,
        index: ::std::os::raw::c_int,
        position: *const f64,
        absolute: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_skin_get_bone_count(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_skin_get_bone_name(
        tag: WbDeviceTag,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_skin_get_bone_orientation(
        tag: WbDeviceTag,
        index: ::std::os::raw::c_int,
        absolute: ::std::os::raw::c_char,
    ) -> *const f64;
}
extern "C" {
    pub fn wb_skin_get_bone_position(
        tag: WbDeviceTag,
        index: ::std::os::raw::c_int,
        absolute: ::std::os::raw::c_char,
    ) -> *const f64;
}
extern "C" {
    pub fn wb_speaker_play_sound(
        left: WbDeviceTag,
        right: WbDeviceTag,
        sound: *const ::std::os::raw::c_char,
        volume: f64,
        pitch: f64,
        balance: f64,
        loop_: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_speaker_stop(tag: WbDeviceTag, sound: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn wb_speaker_is_sound_playing(
        tag: WbDeviceTag,
        sound: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_speaker_set_engine(
        tag: WbDeviceTag,
        engine: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_speaker_set_language(
        tag: WbDeviceTag,
        language: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_speaker_get_engine(tag: WbDeviceTag) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_speaker_get_language(tag: WbDeviceTag) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_speaker_speak(tag: WbDeviceTag, text: *const ::std::os::raw::c_char, volume: f64);
}
extern "C" {
    pub fn wb_speaker_is_speaking(tag: WbDeviceTag) -> ::std::os::raw::c_char;
}
pub const WbFieldType_WB_NO_FIELD: WbFieldType = 0;
pub const WbFieldType_WB_SF_BOOL: WbFieldType = 1;
pub const WbFieldType_WB_SF_INT32: WbFieldType = 2;
pub const WbFieldType_WB_SF_FLOAT: WbFieldType = 3;
pub const WbFieldType_WB_SF_VEC2F: WbFieldType = 4;
pub const WbFieldType_WB_SF_VEC3F: WbFieldType = 5;
pub const WbFieldType_WB_SF_ROTATION: WbFieldType = 6;
pub const WbFieldType_WB_SF_COLOR: WbFieldType = 7;
pub const WbFieldType_WB_SF_STRING: WbFieldType = 8;
pub const WbFieldType_WB_SF_NODE: WbFieldType = 9;
pub const WbFieldType_WB_MF: WbFieldType = 16;
pub const WbFieldType_WB_MF_BOOL: WbFieldType = 17;
pub const WbFieldType_WB_MF_INT32: WbFieldType = 18;
pub const WbFieldType_WB_MF_FLOAT: WbFieldType = 19;
pub const WbFieldType_WB_MF_VEC2F: WbFieldType = 20;
pub const WbFieldType_WB_MF_VEC3F: WbFieldType = 21;
pub const WbFieldType_WB_MF_ROTATION: WbFieldType = 22;
pub const WbFieldType_WB_MF_COLOR: WbFieldType = 23;
pub const WbFieldType_WB_MF_STRING: WbFieldType = 24;
pub const WbFieldType_WB_MF_NODE: WbFieldType = 25;
pub type WbFieldType = ::std::os::raw::c_uint;
pub const WbSimulationMode_WB_SUPERVISOR_SIMULATION_MODE_PAUSE: WbSimulationMode = 0;
pub const WbSimulationMode_WB_SUPERVISOR_SIMULATION_MODE_REAL_TIME: WbSimulationMode = 1;
pub const WbSimulationMode_WB_SUPERVISOR_SIMULATION_MODE_FAST: WbSimulationMode = 2;
pub type WbSimulationMode = ::std::os::raw::c_uint;
extern "C" {
    pub fn wb_supervisor_world_load(filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn wb_supervisor_world_save(
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_world_reload();
}
extern "C" {
    pub fn wb_supervisor_simulation_quit(status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_supervisor_simulation_reset();
}
extern "C" {
    pub fn wb_supervisor_simulation_reset_physics();
}
extern "C" {
    pub fn wb_supervisor_simulation_get_mode() -> WbSimulationMode;
}
extern "C" {
    pub fn wb_supervisor_simulation_set_mode(mode: WbSimulationMode);
}
extern "C" {
    pub fn wb_supervisor_set_label(
        id: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        x: f64,
        y: f64,
        size: f64,
        color: ::std::os::raw::c_int,
        transparency: f64,
        font: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_export_image(
        filename: *const ::std::os::raw::c_char,
        quality: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_supervisor_movie_start_recording(
        filename: *const ::std::os::raw::c_char,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        codec: ::std::os::raw::c_int,
        quality: ::std::os::raw::c_int,
        acceleration: ::std::os::raw::c_int,
        caption: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_movie_stop_recording();
}
extern "C" {
    pub fn wb_supervisor_movie_is_ready() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_movie_failed() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_animation_start_recording(
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_animation_stop_recording() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_node_get_root() -> WbNodeRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_self() -> WbNodeRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_id(node: WbNodeRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_supervisor_node_get_from_id(id: ::std::os::raw::c_int) -> WbNodeRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_from_device(tag: WbDeviceTag) -> WbNodeRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_from_def(def: *const ::std::os::raw::c_char) -> WbNodeRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_from_proto_def(
        node: WbNodeRef,
        def: *const ::std::os::raw::c_char,
    ) -> WbNodeRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_parent_node(node: WbNodeRef) -> WbNodeRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_selected() -> WbNodeRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_type(node: WbNodeRef) -> WbNodeType;
}
extern "C" {
    pub fn wb_supervisor_node_get_field(
        node: WbNodeRef,
        field_name: *const ::std::os::raw::c_char,
    ) -> WbFieldRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_field_by_index(
        node: WbNodeRef,
        index: ::std::os::raw::c_int,
    ) -> WbFieldRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_number_of_fields(node: WbNodeRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_supervisor_node_get_proto_field(
        node: WbNodeRef,
        field_name: *const ::std::os::raw::c_char,
    ) -> WbFieldRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_proto_field_by_index(
        node: WbNodeRef,
        index: ::std::os::raw::c_int,
    ) -> WbFieldRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_proto_number_of_fields(node: WbNodeRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_supervisor_node_remove(node: WbNodeRef);
}
extern "C" {
    pub fn wb_supervisor_node_save_state(
        node: WbNodeRef,
        state_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_node_load_state(
        node: WbNodeRef,
        state_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_node_set_joint_position(
        node: WbNodeRef,
        position: f64,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_supervisor_node_get_def(node: WbNodeRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_node_get_type_name(node: WbNodeRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_node_get_base_type_name(node: WbNodeRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_node_is_proto(node: WbNodeRef) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_node_get_center_of_mass(node: WbNodeRef) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_node_get_contact_point(
        node: WbNodeRef,
        index: ::std::os::raw::c_int,
    ) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_node_get_contact_point_node(
        node: WbNodeRef,
        index: ::std::os::raw::c_int,
    ) -> WbNodeRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_number_of_contact_points(
        node: WbNodeRef,
        include_descendants: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_supervisor_node_get_contact_points(
        node: WbNodeRef,
        include_descendants: ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_int,
    ) -> *mut WbContactPoint;
}
extern "C" {
    pub fn wb_supervisor_node_get_orientation(node: WbNodeRef) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_node_get_position(node: WbNodeRef) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_node_get_pose(node: WbNodeRef, from_node: WbNodeRef) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_node_get_static_balance(node: WbNodeRef) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_node_get_velocity(node: WbNodeRef) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_node_set_velocity(node: WbNodeRef, velocity: *const f64);
}
extern "C" {
    pub fn wb_supervisor_node_reset_physics(node: WbNodeRef);
}
extern "C" {
    pub fn wb_supervisor_node_restart_controller(node: WbNodeRef);
}
extern "C" {
    pub fn wb_supervisor_node_export_string(node: WbNodeRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_node_move_viewpoint(node: WbNodeRef);
}
extern "C" {
    pub fn wb_supervisor_node_set_visibility(
        node: WbNodeRef,
        from: WbNodeRef,
        visible: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_node_add_force(
        node: WbNodeRef,
        force: *const f64,
        relative: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_node_add_force_with_offset(
        node: WbNodeRef,
        force: *const f64,
        offset: *const f64,
        relative: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_node_add_torque(
        node: WbNodeRef,
        torque: *const f64,
        relative: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_field_get_name(field: WbFieldRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_field_get_type(field: WbFieldRef) -> WbFieldType;
}
extern "C" {
    pub fn wb_supervisor_field_get_type_name(field: WbFieldRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_field_get_count(field: WbFieldRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_supervisor_field_enable_sf_tracking(
        field: WbFieldRef,
        sampling_period: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_supervisor_field_disable_sf_tracking(field: WbFieldRef);
}
extern "C" {
    pub fn wb_supervisor_node_enable_pose_tracking(
        node: WbNodeRef,
        sampling_period: ::std::os::raw::c_int,
        from_node: WbNodeRef,
    );
}
extern "C" {
    pub fn wb_supervisor_node_disable_pose_tracking(node: WbNodeRef, from_node: WbNodeRef);
}
extern "C" {
    pub fn wb_supervisor_node_enable_contact_points_tracking(
        node: WbNodeRef,
        sampling_period: ::std::os::raw::c_int,
        include_descendants: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_node_disable_contact_points_tracking(node: WbNodeRef);
}
extern "C" {
    pub fn wb_supervisor_field_get_sf_bool(field: WbFieldRef) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_field_get_sf_int32(field: WbFieldRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_supervisor_field_get_sf_float(field: WbFieldRef) -> f64;
}
extern "C" {
    pub fn wb_supervisor_field_get_sf_vec2f(field: WbFieldRef) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_field_get_sf_vec3f(field: WbFieldRef) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_field_get_sf_rotation(field: WbFieldRef) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_field_get_sf_color(field: WbFieldRef) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_field_get_sf_string(field: WbFieldRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_field_get_sf_node(field: WbFieldRef) -> WbNodeRef;
}
extern "C" {
    pub fn wb_supervisor_field_get_mf_bool(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_field_get_mf_int32(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_supervisor_field_get_mf_float(field: WbFieldRef, index: ::std::os::raw::c_int)
        -> f64;
}
extern "C" {
    pub fn wb_supervisor_field_get_mf_vec2f(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_field_get_mf_vec3f(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_field_get_mf_color(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_field_get_mf_rotation(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_field_get_mf_string(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_field_get_mf_node(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> WbNodeRef;
}
extern "C" {
    pub fn wb_supervisor_field_set_sf_bool(field: WbFieldRef, value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn wb_supervisor_field_set_sf_int32(field: WbFieldRef, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_supervisor_field_set_sf_float(field: WbFieldRef, value: f64);
}
extern "C" {
    pub fn wb_supervisor_field_set_sf_vec2f(field: WbFieldRef, values: *const f64);
}
extern "C" {
    pub fn wb_supervisor_field_set_sf_vec3f(field: WbFieldRef, values: *const f64);
}
extern "C" {
    pub fn wb_supervisor_field_set_sf_rotation(field: WbFieldRef, values: *const f64);
}
extern "C" {
    pub fn wb_supervisor_field_set_sf_color(field: WbFieldRef, values: *const f64);
}
extern "C" {
    pub fn wb_supervisor_field_set_sf_string(
        field: WbFieldRef,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_field_set_mf_bool(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_field_set_mf_int32(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_supervisor_field_set_mf_float(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: f64,
    );
}
extern "C" {
    pub fn wb_supervisor_field_set_mf_vec2f(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    pub fn wb_supervisor_field_set_mf_vec3f(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    pub fn wb_supervisor_field_set_mf_rotation(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    pub fn wb_supervisor_field_set_mf_color(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    pub fn wb_supervisor_field_set_mf_string(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_field_insert_mf_bool(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_field_insert_mf_int32(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_supervisor_field_insert_mf_float(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: f64,
    );
}
extern "C" {
    pub fn wb_supervisor_field_insert_mf_vec2f(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    pub fn wb_supervisor_field_insert_mf_vec3f(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    pub fn wb_supervisor_field_insert_mf_rotation(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    pub fn wb_supervisor_field_insert_mf_color(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    pub fn wb_supervisor_field_insert_mf_string(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_field_remove_mf(field: WbFieldRef, index: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_supervisor_field_import_mf_node_from_string(
        field: WbFieldRef,
        position: ::std::os::raw::c_int,
        node_string: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_field_remove_sf(field: WbFieldRef);
}
extern "C" {
    pub fn wb_supervisor_field_import_sf_node_from_string(
        field: WbFieldRef,
        node_string: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_virtual_reality_headset_is_used() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_virtual_reality_headset_get_position() -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_virtual_reality_headset_get_orientation() -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_node_enable_contact_point_tracking(
        node: WbNodeRef,
        sampling_period: ::std::os::raw::c_int,
        include_descendants: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_node_disable_contact_point_tracking(
        node: WbNodeRef,
        include_descendants: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_simulation_revert();
}
extern "C" {
    pub fn wb_supervisor_load_world(filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn wb_supervisor_save_world(
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_field_remove_mf_node(field: WbFieldRef, position: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_supervisor_simulation_physics_reset();
}
extern "C" {
    pub fn wb_supervisor_movie_get_status() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_supervisor_start_movie(
        file: *const ::std::os::raw::c_char,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        codec: ::std::os::raw::c_int,
        quality: ::std::os::raw::c_int,
        acceleration: ::std::os::raw::c_int,
        caption: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_stop_movie();
}
extern "C" {
    pub fn wb_supervisor_get_movie_status() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_touch_sensor_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_touch_sensor_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_touch_sensor_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_touch_sensor_get_lookup_table_size(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_touch_sensor_get_lookup_table(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_touch_sensor_get_value(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_touch_sensor_get_values(tag: WbDeviceTag) -> *const f64;
}
pub const WbTouchSensorType_WB_TOUCH_SENSOR_BUMPER: WbTouchSensorType = 0;
pub const WbTouchSensorType_WB_TOUCH_SENSOR_FORCE: WbTouchSensorType = 1;
pub const WbTouchSensorType_WB_TOUCH_SENSOR_FORCE3D: WbTouchSensorType = 2;
pub type WbTouchSensorType = ::std::os::raw::c_uint;
extern "C" {
    pub fn wb_touch_sensor_get_type(tag: WbDeviceTag) -> WbTouchSensorType;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbu_motion_new(filename: *const ::std::os::raw::c_char) -> WbMotionRef;
}
extern "C" {
    pub fn wbu_motion_delete(motion: WbMotionRef);
}
extern "C" {
    pub fn wbu_motion_play(motion: WbMotionRef);
}
extern "C" {
    pub fn wbu_motion_stop(motion: WbMotionRef);
}
extern "C" {
    pub fn wbu_motion_set_loop(motion: WbMotionRef, loop_: ::std::os::raw::c_char);
}
extern "C" {
    pub fn wbu_motion_set_reverse(motion: WbMotionRef, reverse: ::std::os::raw::c_char);
}
extern "C" {
    pub fn wbu_motion_is_over(motion: WbMotionRef) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_motion_get_duration(motion: WbMotionRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbu_motion_get_time(motion: WbMotionRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbu_motion_set_time(motion: WbMotionRef, time: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wbu_string_strsep(
        stringp: *mut *mut ::std::os::raw::c_char,
        delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_string_replace(
        value: *mut ::std::os::raw::c_char,
        before: *mut ::std::os::raw::c_char,
        after: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_system_getenv(
        variable: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_system_short_path(
        path: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_system_tmpdir() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_system_webots_instance_path(
        refresh: ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
pub const WbuCarType_WBU_CAR_TRACTION: WbuCarType = 0;
pub const WbuCarType_WBU_CAR_PROPULSION: WbuCarType = 1;
pub const WbuCarType_WBU_CAR_FOUR_BY_FOUR: WbuCarType = 2;
pub type WbuCarType = ::std::os::raw::c_uint;
pub const WbuCarEngineType_WBU_CAR_COMBUSTION_ENGINE: WbuCarEngineType = 0;
pub const WbuCarEngineType_WBU_CAR_ELECTRIC_ENGINE: WbuCarEngineType = 1;
pub const WbuCarEngineType_WBU_CAR_PARALLEL_HYBRID_ENGINE: WbuCarEngineType = 2;
pub const WbuCarEngineType_WBU_CAR_POWER_SPLIT_HYBRID_ENGINE: WbuCarEngineType = 3;
pub type WbuCarEngineType = ::std::os::raw::c_uint;
pub const WbuCarWheelIndex_WBU_CAR_WHEEL_FRONT_RIGHT: WbuCarWheelIndex = 0;
pub const WbuCarWheelIndex_WBU_CAR_WHEEL_FRONT_LEFT: WbuCarWheelIndex = 1;
pub const WbuCarWheelIndex_WBU_CAR_WHEEL_REAR_RIGHT: WbuCarWheelIndex = 2;
pub const WbuCarWheelIndex_WBU_CAR_WHEEL_REAR_LEFT: WbuCarWheelIndex = 3;
pub const WbuCarWheelIndex_WBU_CAR_WHEEL_NB: WbuCarWheelIndex = 4;
pub type WbuCarWheelIndex = ::std::os::raw::c_uint;
extern "C" {
    pub fn wbu_car_init();
}
extern "C" {
    pub fn wbu_car_cleanup();
}
extern "C" {
    pub fn wbu_car_get_type() -> WbuCarType;
}
extern "C" {
    pub fn wbu_car_get_engine_type() -> WbuCarEngineType;
}
extern "C" {
    pub fn wbu_car_set_indicator_period(period: f64);
}
extern "C" {
    pub fn wbu_car_get_indicator_period() -> f64;
}
extern "C" {
    pub fn wbu_car_get_backwards_lights() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_car_get_brake_lights() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_car_get_track_front() -> f64;
}
extern "C" {
    pub fn wbu_car_get_track_rear() -> f64;
}
extern "C" {
    pub fn wbu_car_get_wheelbase() -> f64;
}
extern "C" {
    pub fn wbu_car_get_front_wheel_radius() -> f64;
}
extern "C" {
    pub fn wbu_car_get_rear_wheel_radius() -> f64;
}
extern "C" {
    pub fn wbu_car_get_wheel_encoder(wheel_index: WbuCarWheelIndex) -> f64;
}
extern "C" {
    pub fn wbu_car_get_wheel_speed(wheel_index: WbuCarWheelIndex) -> f64;
}
extern "C" {
    pub fn wbu_car_set_left_steering_angle(angle: f64);
}
extern "C" {
    pub fn wbu_car_set_right_steering_angle(angle: f64);
}
extern "C" {
    pub fn wbu_car_get_right_steering_angle() -> f64;
}
extern "C" {
    pub fn wbu_car_get_left_steering_angle() -> f64;
}
extern "C" {
    pub fn wbu_car_enable_limited_slip_differential(enable: ::std::os::raw::c_char);
}
extern "C" {
    pub fn wbu_car_enable_indicator_auto_disabling(enable: ::std::os::raw::c_char);
}
pub use self::WbuCarEngineType as wbu_car_engine_type;
pub use self::WbuCarType as wbu_car_type;
pub use self::WbuCarWheelIndex as wbu_car_wheel_index;
pub const WbuDriverIndicatorState_OFF: WbuDriverIndicatorState = 0;
pub const WbuDriverIndicatorState_RIGHT: WbuDriverIndicatorState = 1;
pub const WbuDriverIndicatorState_LEFT: WbuDriverIndicatorState = 2;
pub type WbuDriverIndicatorState = ::std::os::raw::c_uint;
pub const WbuDriverControlMode_UNDEFINED_CONTROL_MODE: WbuDriverControlMode = -1;
pub const WbuDriverControlMode_SPEED: WbuDriverControlMode = 0;
pub const WbuDriverControlMode_TORQUE: WbuDriverControlMode = 1;
pub type WbuDriverControlMode = ::std::os::raw::c_int;
pub const WbuDriverWiperMode_DOWN: WbuDriverWiperMode = 0;
pub const WbuDriverWiperMode_SLOW: WbuDriverWiperMode = 1;
pub const WbuDriverWiperMode_NORMAL: WbuDriverWiperMode = 2;
pub const WbuDriverWiperMode_FAST: WbuDriverWiperMode = 3;
pub type WbuDriverWiperMode = ::std::os::raw::c_uint;
extern "C" {
    pub fn wbu_driver_initialization_is_possible() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_driver_init();
}
extern "C" {
    pub fn wbu_driver_cleanup();
}
extern "C" {
    pub fn wbu_driver_step() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbu_driver_set_steering_angle(steering_angle: f64);
}
extern "C" {
    pub fn wbu_driver_get_steering_angle() -> f64;
}
extern "C" {
    pub fn wbu_driver_set_cruising_speed(speed: f64);
}
extern "C" {
    pub fn wbu_driver_get_target_cruising_speed() -> f64;
}
extern "C" {
    pub fn wbu_driver_get_current_speed() -> f64;
}
extern "C" {
    pub fn wbu_driver_set_throttle(throttle: f64);
}
extern "C" {
    pub fn wbu_driver_get_throttle() -> f64;
}
extern "C" {
    pub fn wbu_driver_set_brake_intensity(intensity: f64);
}
extern "C" {
    pub fn wbu_driver_get_brake_intensity() -> f64;
}
extern "C" {
    pub fn wbu_driver_set_indicator(state: WbuDriverIndicatorState);
}
extern "C" {
    pub fn wbu_driver_set_hazard_flashers(state: ::std::os::raw::c_char);
}
extern "C" {
    pub fn wbu_driver_get_indicator() -> WbuDriverIndicatorState;
}
extern "C" {
    pub fn wbu_driver_get_hazard_flashers() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_driver_set_dipped_beams(state: ::std::os::raw::c_char);
}
extern "C" {
    pub fn wbu_driver_set_antifog_lights(state: ::std::os::raw::c_char);
}
extern "C" {
    pub fn wbu_driver_get_dipped_beams() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_driver_get_antifog_lights() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_driver_get_rpm() -> f64;
}
extern "C" {
    pub fn wbu_driver_get_gear() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbu_driver_set_gear(gear: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wbu_driver_get_gear_number() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbu_driver_get_control_mode() -> WbuDriverControlMode;
}
extern "C" {
    pub fn wbu_driver_set_wiper_mode(mode: WbuDriverWiperMode);
}
extern "C" {
    pub fn wbu_driver_get_wiper_mode() -> WbuDriverWiperMode;
}
extern "C" {
    pub fn wbu_driver_set_brake(brake: f64);
}
extern "C" {
    pub fn wbu_driver_get_brake() -> f64;
}
pub use self::WbuDriverControlMode as wbu_control_mode;
pub use self::WbuDriverIndicatorState as wbu_indicator_state;
pub use self::WbuDriverWiperMode as wbu_wipers_mode;
extern "C" {
    pub fn wbu_driver_set_wipers_mode(mode: wbu_wipers_mode);
}
extern "C" {
    pub fn wbu_driver_get_wipers_mode() -> wbu_wipers_mode;
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
